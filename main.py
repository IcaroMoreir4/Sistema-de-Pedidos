import os
from fastapi import FastAPI
from fastapi.security import OAuth2PasswordBearer
from passlib.context import CryptContext
from dotenv import load_dotenv

load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")
ALGORITHM = os.getenv("ALGORITHM")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES"))

# Configura√ß√£o melhorada do FastAPI com metadados descritivos
app = FastAPI(
    title="üçΩÔ∏è Sistema de Pedidos - API",
    description="""
    ## üöÄ Bem-vindo ao Sistema de Pedidos!
    
    Esta API permite gerenciar pedidos de qualquer lanchonete, restaurante ou estabelecimento com sistema de autentica√ß√£o e autoriza√ß√£o.
    
    ### üìö **Como usar esta API:**
    
    1. **Primeiro, acesse `/docs`** para ver a documenta√ß√£o interativa completa
    2. **Crie uma conta** usando `/auth/criar_conta`
    3. **Fa√ßa login** usando `/auth/login` para obter um token de acesso
    4. **Use o token** no cabe√ßalho `Authorization: Bearer <seu_token>` para acessar as rotas protegidas
    
    ### üîê **Autentica√ß√£o:**
    - Todas as rotas de pedidos requerem autentica√ß√£o
    - Use o endpoint `/auth/login-form` no Swagger UI para facilitar os testes
    - Tokens expiram em 30 minutos por padr√£o
    
    ### üë• **Tipos de Usu√°rio:**
    - **Usu√°rios comuns**: Podem criar pedidos e gerenciar seus pr√≥prios pedidos
    - **Administradores**: Podem acessar todos os pedidos e criar outros administradores
    
    ### üìã **Funcionalidades Principais:**
    - Sistema de autentica√ß√£o JWT
    - Gerenciamento de pedidos com status
    - Adi√ß√£o/remo√ß√£o de itens nos pedidos
    - Controle de pre√ßos autom√°tico
    - Sistema de permiss√µes baseado em roles
    
    ---
    **Desenvolvido com FastAPI, SQLAlchemy e SQLite**
    """,
    version="1.0.0",
    contact={
        "name": "Equipe de Desenvolvimento",
        "email": "dev@restaurante.com",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_tags=[
        {
            "name": "auth",
            "description": "Opera√ß√µes de autentica√ß√£o e gerenciamento de usu√°rios. Inclui login, cria√ß√£o de contas e gerenciamento de tokens."
        },
        {
            "name": "pedidos",
            "description": "Gerenciamento completo de pedidos. Inclui cria√ß√£o, visualiza√ß√£o, atualiza√ß√£o e cancelamento de pedidos e itens."
        }
    ]
)

bcrypt_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_schema = OAuth2PasswordBearer(tokenUrl="auth/login-form")

from auth_routes import auth_router
from order_routes import order_router

app.include_router(auth_router)
app.include_router(order_router)

@app.get("/", tags=["principal"])
async def rota_principal():
    """
    # üè† P√°gina Principal da API de Pedidos
    
    ## üìñ Instru√ß√µes de Uso
    
    ### üîç Para Desenvolvedores e Testadores:
    - **Acesse `/docs`** para a documenta√ß√£o interativa completa (Swagger UI)
    - **Acesse `/redoc`** para uma documenta√ß√£o alternativa mais limpa
    
    ### üöÄ Primeiros Passos:
    1. **Documenta√ß√£o**: Comece explorando `/docs` para entender todos os endpoints
    2. **Cria√ß√£o de Conta**: Use `/auth/criar_conta` para criar um usu√°rio
    3. **Autentica√ß√£o**: Use `/auth/login` para obter um token de acesso
    4. **Teste os Endpoints**: Use o Swagger UI para testar todas as funcionalidades
    
    ### üõ†Ô∏è Endpoints Dispon√≠veis:
    
    #### üîê **Autentica√ß√£o (`/auth`)**
    - `POST /auth/criar_conta` - Criar conta de usu√°rio comum
    - `POST /auth/criar_admin` - Criar conta de administrador (requer admin)
    - `POST /auth/login` - Login com email/senha
    - `POST /auth/login-form` - Login via formul√°rio (para Swagger UI)
    - `GET /auth/refresh` - Renovar token de acesso
    
    #### üçΩÔ∏è **Pedidos (`/pedidos`)**
    - `GET /pedidos/` - Listar todos os pedidos (apenas admin)
    - `POST /pedidos/` - Criar novo pedido
    - `GET /pedidos/meus` - Listar meus pedidos
    - `GET /pedidos/{id}` - Visualizar pedido espec√≠fico
    - `POST /pedidos/{id}/cancelar` - Cancelar pedido
    - `POST /pedidos/{id}/finalizar` - Finalizar pedido
    - `POST /pedidos/{id}/itens` - Adicionar item ao pedido
    - `DELETE /pedidos/itens/{id}` - Remover item do pedido
    
    ### üîß **Tecnologias Utilizadas:**
    - **Backend**: FastAPI (Python)
    - **Banco de Dados**: SQLite com SQLAlchemy
    - **Autentica√ß√£o**: JWT (JSON Web Tokens)
    - **Criptografia**: bcrypt para senhas
    - **Documenta√ß√£o**: Swagger UI autom√°tica
    
    ### üìù **Exemplo de Uso:**
    ```bash
    # 1. Criar conta
    curl -X POST "http://localhost:8000/auth/criar_conta" \
         -H "Content-Type: application/json" \
         -d '{"nome": "Jo√£o Silva", "email": "joao@email.com", "senha": "123456"}'
    
    # 2. Fazer login
    curl -X POST "http://localhost:8000/auth/login" \
         -H "Content-Type: application/json" \
         -d '{"email": "joao@email.com", "senha": "123456"}'
    
    # 3. Usar o token retornado para acessar endpoints protegidos
    curl -X GET "http://localhost:8000/pedidos/meus" \
         -H "Authorization: Bearer <seu_token_aqui>"
    ```
    
    ---
    **üéØ Dica**: Use sempre o Swagger UI em `/docs` para uma experi√™ncia mais interativa e visual!
    """
    return {
        "message": "üçΩÔ∏è Bem-vindo ao Sistema de Pedidos!",
        "instrucoes": "Acesse /docs para a documenta√ß√£o completa e interativa",
        "endpoints_disponiveis": {
            "documentacao": {
                "swagger_ui": "/docs",
                "redoc": "/redoc"
            },
            "autenticacao": "/auth",
            "pedidos": "/pedidos"
        },
        "primeiros_passos": [
            "1. Acesse /docs para explorar a API",
            "2. Crie uma conta em /auth/criar_conta",
            "3. Fa√ßa login em /auth/login",
            "4. Use o token para acessar endpoints protegidos"
        ]
    }

# para rodar o c√≥digo , executar no terminal:
# uvicorn main:app --reload

